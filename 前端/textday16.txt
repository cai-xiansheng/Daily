1.	页面布局
		float,clear:both,margin,padding
		position:
			left,top,bottom,right.
		
HTML
	块级标签
	行内标签
CSS
	position 
	margin 
	background
	text-align
	padding
	font-size
	z-index
	overflow
	:hover
	opacity
	float(clear:both)
	line-height
	border
	display
	color
	
	补充：页面布局
		position:
			fixed;永远固定在窗口的某个位置
			relative;单独没有意义
			absolute;第一次定位，可以在指定位置下，滚动时就不在了。
			
JavaScript
	1.	for循环
	
		for(var item in [11,22,33]){
			console.log(item)
		}
		var arra=[11,22,33,44]
		for(var i=0;i<arra.length;i++){
			break;
		}
		
		while(条件){
		
		}
		
	2.条件语句
		
		if(){
		
		}else if(){
		
		}else{
		
		}
		
		switch(name){
		
			case '1':
				console.log(123);
				break;
			case '12:
				console.log(123);
				break;
			case '13':
				console.log(123);
				break;
			default :
				console.log(561);
		}
		
	3.	函数
		function func(arg){
				return arg+1
		}
		
		var result = func(1)
		console.log(result);
		
		普通函数：
		
			function func(){
			
			}
			
		匿名函数：
		
			function func(arg){
				return arg+1
			}
			
			setInterval("func()",5000);			//计时器
			
			setInterval(function(){
				console,log(123);
			},5000)
			
		自执行函数：（创建函数并且自动执行）
		
			function function(){
			
			}
			//func(1)
			
			(function (arg){
				console.log(arg);
			})(1)
			
	4.	序列化
		JSON.stringify() 		将对象转化为字符串
		JSON.parse()			将字符串转化为对象类型
		
	5.	转义
		
		客户端（cookie）    =》服务器端
			将数据经过转义后，保存在cookie
		
	6.	eval
		python:
			val = eval(表达式)
					exec（执行带码）
		JavaScript：
			eval
		
	6.	Date类
	
		var d = new Date()
		
		d.getXXX  获取
		d.setXXX  设置
		
	7.	作用域
	
		========================= 1. =======================
		其他语言：以代码块作为作用域
		
					public void	func(){
						if(1==1){
							string name = 'Java';
						}
						console.writeline(name);
					}
					
					func()
					//报错
		Python:		以函数作为作用域
				情况一：
					def func():
						if 1==1:
							name = 'alex'
						print(name)
						
					func()
				情况二：
					def func():
						if 1==1:
							name = 'alex'
						print(name)
						
					func()
					print(name)
					//报错
		JavaScript：默认以函数作为作用域
		
					function func(){
							if(1==1){
								var name = 'alex'
							}
							console.log(name);
					}
					func()
					
		========================= 2.函数的作用域在函数未被调用之前，已经创建 =======================
		
		function func(){
			if(1==1){
				var name  = 'alex';
			}
			console.log(name);
		}
		
		
		========================= 3. 函数的作用域链，并且也是在被调用之前创建的 =======================
		示例一：
		
		xo = "alex";
		
		function func(){
		
			//var xo = 'eric';
			function inner(){
			//	var xo = 'tony';
				console.log(xo);
			}
			//inner()
		}
		
		func()
		
		
		示例二：
		xo = "alex";
		
		function func(){
		
			var xo = 'eric';
			function inner(){
				
				console.log(xo);
			}
			return inner;
		}
		
		var ret =func()
		
		ret()
		
		示例三：
			
			xo = "alex";
		
		function func(){
		
			var xo = 'eric';
			function inner(){
				
				console.log(xo);
			}
			var ko='tony';
			return inner;
		}
		
		var ret =func()
		
		ret()
		
		
		========================= 4.函数内部局部变量 提前声明 =======================
		
		function func(){
			console.log(xxoo);
			
		}
		
		func();
		//程序直接报错，也就是undefined
		
		function func(){
			console.log(xxoo);
			var xxoo = 'alex';	//局部变量
		}
		
		解释过程：var xxoo;
		再执行console
		最后在执行var xxoo = 'alex';
		
		func();
		
		//undefined
		
	14.	JavaScript面向对象
	
		function foo (){
			var xo = 'alex';
		}
		
		foo()
		
		
		
		function Foo (){
			var xo = 'alex';
			sayname = function (){
				console.log(name)
			}
		}
		
		var obj = new Foo('we');
		=======》需要注意的点
		a.  this 代指对象（python self）
		b.	创建对象时，new函数()
		
		
		
		原型：
		
				function Foo(){
					this.name = n;
				}
				
				#Foo的原型
				Foo.prototype = {
					'sayname':function (){
					console.log(this.name)
					}
				}
		
		
		
		obj1 = new Foo('we');
		obj1.sayname()
		
		obj2 = new Foo('wee');
		
		
DOM		//全部使用驼峰式写法 例:getElementById
	
	查找
		直接查找
			var obj = document.getElementById('il')
		简介查找
			innerText		//只是获取当前的文本
			innerHTML		//获取全部内容，包括其标签
			value都是通过value获取的（）
			
					input  value //获取当前标签中的值
			
					select		//获取选中的value的值（selectedIndex）
					textarea	//也是获取其中的值
			
			
			搜索框的实例
			onfocus		//获取焦点
			
				function Focur(){
					var tag = document.getElementById('i1')
					var val = tag.value;
					if(val == '请输入关键字'){
						tag.value = '';
					}
				}	//这是对光标，也就是焦点移除的时候，如果input的value为'请输入关键字'，则将input的value变成空
			
			onblur		//离开焦点
				function Blur(){
					var tag = document.getElementById('i1')
					var val = tag.value;
					if(val == ''){
						tag.value = '请输入关键字';
					}
				}		//这是对光标，也就是焦点移除的时候，如果input为空，则将input的value变成‘请输入关键字’
					
			还有一个onclick   //这是点击按钮会召唤出来一个函数
			
			然而onfocus是聚焦光标的如果这个地方被聚焦，就执行他所带来的函数
			onblur是光标离开他是的判断。
		
	操作
		样式操作
			clasName
			classList
				classList.add
				classList.remove
			最小可以对style的一个元素进行操作
			
			
		属性操作
			attributes
			setAtterbute		添加属性
			removeAtterbute			删除属性
			
		创建标签，并添加到HTML中 
			a.	字符串形式
			
			b.	对象形式
				document.createElement()	
				
	事件：
		onclick,onblur,onfocus
		 
		 
		行为	样式	结构	相分离的页面？
		js		css		html
		
		行为：让页面能够动起来的		CSS+JavaScript+HTML
		
		绑定事件的两种方式：
			a.	直接标签绑定	onclick='xxx()'		onfocus
			b.	先获取Dom对象，然后进行绑定
				document.getElementById('xx').onclick
				document.getElementById('xx').onfocus
				
		this，当前触发事件的标签
			a.	第一种绑定方式
				<input type = 'button' onclick= 'ClickOn(this)'>
				
				function ClickOn(self){
						//self 当前的标签
				}
				
			b.	第二种绑定方式
				
				<input id = 'i1' type = 'button'>
				document.getElementById('i1') = function (){
					//this  代指当前点击的标签
				}
				
	作用域实例
			var myTrs = document.getElementByTagName('tr');
			var len = myTrs.length;
			for(var i = 0;i<len;i++){
				myTrs[i].onmouseover = function(){
					this.style.backgroundColor = 'red';
				};
			}
				